import os
import psycopg2
import redis

from flask import Flask, jsonify
from flask_smorest import Api
from flask_jwt_extended import JWTManager
from flask_migrate import Migrate
from dotenv import load_dotenv
from rq import Queue

from db import db
from blocklist import BLOCKLIST
import models

from resources.item import blp as ItemBlueprint
from resources.store import blp as StoreBlueprint
from resources.tag import blp as TagBlueprint
from resources.user import blp as UserBlueprint

def create_app(db_url=None):

	app = Flask(__name__)

	load_dotenv()

	connection = redis.from_url(
		os.getenv("REDIS_URL")
	)
	app.queue = Queue("emails", connection=connection)
	
	# propagate exception if it happens inside an extension of flask
	# to the main app, so we can see it
	app.config["PROPAGATE_EXCEPTION"] = True
	app.config["API_TITLE"] = "Stores REST API"
	app.config["API_VERSION"] = "v1"
	# openapi is a standard for api documentation
	app.config["OPENAPI_VERSION"] = "3.0.3"
	# tell flask-smorest where the root of the api is
	app.config["OPENAPI_URL_PREFIX"] = "/"
	# some documentation configuration
	app.config["OPENAPI_SWAGGER_UI_PATH"] = "/swagger-ui"
	app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/"

	app.config["SQLALCHEMY_DATABASE_URI"] = db_url or os.getenv("DATABASE_URL") #, "postgresql+psycopg2://ls27091994:new_password@localhost:5432/teclado")
	app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
	# connects the sqlalchemy to flask app
	db.init_app(app)
	migrate = Migrate(app, db)

	# connects flask_smorest extension with flask
	api = Api(app)

	# JWT_SECRET_KEY is used for signing the JWTs - to check if the
	# jwt was generated by this app
	# you should generate a long random value, and store somewhere. For example:
	# ``` python
	# import secrets
	# secrets.SystemRandom().getrandbits(128)
	# ```
	# it should also be stored in an environmnent variable
	app.config["JWT_SECRET_KEY"] = "39023126863386461100147878641523446088"
	jwt = JWTManager(app)

	# checks if token is in the clacklist. If this function returns True, 
	# it means the jwt was revoked and the function returns an error
	@jwt.token_in_blocklist_loader
	def check_if_token_in_blocklist(jwt_header, jwt_payload):
		return jwt_payload["jti"] in BLOCKLIST

	# define error message the user receive in case his jwt is in the blacklist
	@jwt.revoked_token_loader
	def revoked_token_callback(jwt_header, jwt_payload):
		return (
			jsonify({"message": "The token has been revoked.", "error": "token_revoked"}),
			401,
		)

	# when needs a fresh token but received a non-fresh token
	@jwt.needs_fresh_token_loader
	def token_not_fresh_callback(jwt_header, jwt_payload):
		return (
			jsonify({"description": "The token is not fresh.", "error": "fresh_token_required"}),
			401
		)


	# this function runs everytime a jwt is created, addint extra info to it
	@jwt.additional_claims_loader
	def add_claims_to_jwt(identity):
		# this function receives the user identity, which is passed to the
		# jwt when the JWT is created in the login function
		if identity == 1:
			return {"is_admin": True}
		return {"is_admin": False}

	@jwt.expired_token_loader
	def expired_token_callback(jwt_header, jwt_payload):
		return (
			jsonify({"message": "The token has expired.", "error": "token_expired"}),
			401
		)

	@jwt.invalid_token_loader
	def invalid_token_callback(error):
		return (
			jsonify({"message": "Signature verification failed.", "error": "invalid_token"}),
			401
		)

	@jwt.unauthorized_loader
	def missing_token_callback(error):
		return (
			jsonify(
				{
					"description": "Request does not contain an access token.",
					"error": "authorization_required"
				}
			),
			401
		)


	# the lines below is not need when using Flask-Migrate
	# run this before first request is ever processed
	# with app.app_context():
		# this is going to run only if the tables don't exist already
		# db.create_all()

	api.register_blueprint(ItemBlueprint)
	api.register_blueprint(StoreBlueprint)
	api.register_blueprint(TagBlueprint)
	api.register_blueprint(UserBlueprint)

	return app